#summary Building a Custom Player Implementation
#sidebar TableOfContents

_*Note: This page is still in draft form - the framework is in very early alpha form and as such the API is changing as overlay support is built into the JW Player plugin and the new Flowplayer plugin is developed - please use with caution*_

The VAST actionscript 3 framework can be used to produce custom player implementations.

To deliver OpenX video advertising to a custom player, 7 key steps need to be taken:

  * [VASTAs3FrameworkHowToKeyInterfaces Step 1]: Make sure that the key interface classes are integrated into your player class(es)

  * [VASTAs3FrameworkHowToConfiguration Step 2]: Read in the ad related configuration so that the framework knows what form of video advertising is to be delivered

  * [VASTAs3FrameworkHowToTimeTracking Step 3]: Hook in the player's time tracking mechanism to the framework so that the various ad related events can be fired at the right point in time

  * [VASTAs3FrameworkHowToControlBar Step 4]: Configure the control bar handling so that these events can be tracked via the framework and the OpenX ad server

  * [VASTAs3FrameworkHowToDisplayCallbacks Step 5]: Implement the required display related callback functions (declared in the `VideoAdDisplayController` interface) so that non linear video ads (e.g. overlays) and companions can be displayed 

  * [VASTAs3FrameworkHowToRequestVASTData Step 6]: Add the code to make a request to the OpenX ad server (via the framework) to obtain the video ads for a given "ad schedule" - the result is a fully configured `StreamSequence` that splices the show and video ads together into an ordered list of streams to be played

  * [VASTAs3FrameworkHowToPlaylists Step 7]: Load the fully configured "stream sequence" into the player (manually through custom code or via a playlist) and play it

To illustrate how to use the VAST framework, we'll walk through the key implementation points for the JW Player plugin `OpenXAdStreamer`. Where major differences exist between the code for the JW Player and Flowplayer plugins, we'll attempt to illustrate those differences as we go.

You can grab the source code for the JW Player Ad Streamer [http://code.google.com/p/openx-iab-vast/downloads/detail?name=bouncingminds.openX.jwplayer-latest.tar.gz&can=2&q= here].

If you need just the source for the VAST AS3 framework, you can find it [http://openx-iab-vast.googlecode.com/files/bouncingminds.vast.as3-latest.tar.gz here].

===Tracking Time in JW Player===

In JW Player, to forward time based events to the VAST framework to be analysed and actioned (where required), establish a model listener for the `TIME` event: 

{{{
_view.addModelListener(ModelEvent.TIME, timeHandler);
}}}

This listener above requires a function called `timeHandler` to be declared:

{{{
private function timeHandler(evt:ModelEvent):void {
    if(_streamSequence != null) {
       _streamSequence.processTimeEvent(_activeStreamIndex, new TimeEvent(evt.data.position * 1000, evt.data.duration));
    }
}
}}}

The `timeHandler` above identifies whether or not a VAST stream sequence (`StreamSequence`) has been loaded. If it has, it forwards the time event to the sequence to be processed.

The `StreamSequence` class has an public method called `processTimeEvent`. This method takes two parameters:

  # The index of the stream (`_activeStreamIndex`) against which the time event is to be applied
  # A `TimeEvent` which holds two values - the actual time (in milliseconds) and the duration of the time event

Keeping track of the active stream index as the playlist is processed is critical to ensuring that timed events are appropriately processed. 

In JW Player, time is reported relative to each clip in the playlist - so when a new clip is started, time is reset to 0.

So, when a time event is passed to the VAST framework, the index of the stream against which that event is to be assessed must be provided.

To keep track of the active stream index for a playlist, the following listener is activated:

{{{
_view.addControllerListener(ControllerEvent.ITEM, playlistSelectionHandler);	
}}}

`playlistSelectionHandler` is called whenever a `change item event` occurs on the playlist. The function then explicitly saves the active clip index from the playlist as `_activeStreamIndex`. This value is then passed to `StreamSequence.processTimeEvent()` when a time event occurs in JW Player every 10th of a second.

{{{
private function playlistSelectionHandler(evt:ControllerEvent):void {
    _activeStreamIndex = evt.data.index;
    doLog("Active playlist stream index changed to " + _activeStreamIndex, DebugObject.DEBUG_PLAYLIST);
}
}}}

===Tracking Time in Flowplayer===

_To be completed when the Flowplayer HTTP plugin is released_

----

==Step 4: Tracking Control Bar Events==

{{{
public function toggleSeekerBar(enable:Boolean):void {
    if(_openXConfig.disableControls) {
        var controlbar:Object = _view.getPlugin('controlbar');
        controlbar.block(!enable);
    }
}
}}}

{{{
_view.addViewListener(ViewEvent.MUTE, onMuteEvent);		
_view.addViewListener(ViewEvent.PLAY, onPlayEvent);		
_view.addViewListener(ViewEvent.STOP, onStopEvent);		
_view.addViewListener(ViewEvent.FULLSCREEN, onResizeEvent);
}}}

{{{
private function onStopEvent(evt:ViewEvent):void {
    _streamSequence.processStopEventForStream(_activeStreamIndex);
}
}}}

----

==Step 5: Processing Ad Display Events==

{{{
}}}

----

==Step 6: Obtain the VAST Ad Data From the Ad Server==

{{{
_openXAdServer = AdServerFactory.getAdServer(AdServerFactory.AD_SERVER_OPENX) as OpenXAdServer;
_openXAdServer.initialise(_openXConfig);
_openXAdServer.loadVideoAdData(this, this);
}}}

----

==Step 7: Obtaining and Loading a Playlist from the VAST Response==


{{{
public function onTemplateLoaded():void {
    doLogAndTrace("VAST data loaded - ", _openXAdServer.template, DebugObject.DEBUG_FATAL);
    _playlist = loadPlaylist();
    _view.sendEvent(ViewEvent.LOAD, XSPFParser.parse(_playlist.nextTrackAsPlaylistXML()));
}
}}}

{{{
public function onTemplateLoadError(event:Event):void {
    doLog("FAILURE loading VAST template - " + event.toString(), DebugObject.DEBUG_FATAL);
}
}}}

----

==Debugging the Framework==