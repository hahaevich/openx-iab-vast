#summary Building a Custom Player Implementation
#sidebar TableOfContents

*Note:* This page is still in draft form

The VAST actionscript 3 framework can be used to produce custom player implementations.

To deliver OpenX video advertising to a custom player, 7 key steps need to be taken:

  * [VASTAs3FrameworkHowTo#Step_1:_The_Key_Interfaces Step 1]: Make sure that the right interface classes are integrated into your player class(es)

  * [VASTAs3FrameworkHowTo#Step_2:_Loading_Configuration_Data Step 2]: Read in the ad related configuration so that the framework knows what form of video advertising is to be delivered

  * [VASTAs3FrameworkHowTo#Step_3:_Tracking_Time_and_Events Step 3]: Hook in the player's time tracking mechanism to the framework so that the various ad related events can be fired at the right point in time

  * [VASTAs3FrameworkHowTo#Step_4:_Tracking_Control_Bar_Events Step 4]: Configure the control bar handling so that these events can be tracked via the framework and the OpenX ad server

  * [VASTAs3FrameworkHowTo# Step 5]: Implement the required display related callback functions (declared in the `VideoAdDisplayController` interface) so that non linear video ads can be displayed (e.g. overlay and companions)

  * [VASTAs3FrameworkHowTo# Step 6]: Make a request to the OpenX ad server (via the framework) to obtain the video ads for a given "ad schedule" - the result is a fully configured `StreamSequence` that splices the show and video ads together into an ordered list of streams to be played

  * [VASTAs3FrameworkHowTo# Step 7]: Load the fully configured "stream sequence" into the player (manually through custom code or via a playlist) and play it

To illustrate how to use the VAST framework, we'll walk through the key implementation points for the JW Player plugin `OpenXAdStreamer`.

You can grab the source code for the JW Player Ad Streamer [http://code.google.com/p/openx-iab-vast/downloads/detail?name=bouncingminds.openX.jwplayer-latest.tar.gz&can=2&q= here].

==Step 1: The Key Interfaces==

The first thing you will notice about the JW Player plugin is that it implements three key interfaces:

{{{
import com.bouncingminds.vast.display.VideoAdDisplayController;
import com.bouncingminds.vast.model.TemplateLoadListener;
import com.bouncingminds.vast.tracking.TrackingEventListener;

public class OpenXAdStreamer 
       extends MovieClip 
       implements PluginInterface, TemplateLoadListener, VideoAdDisplayController, TrackingEventListener {

       ....
}
}}}

The `TemplateLoadListener` interface provides the hooks that allows the VAST framework to call the player plugin when the VAST data has either been successfully loaded or if it's failed to load.

The `VideoAdDisplayController` interface provides a mechanism that allows the VAST framework to make a call back into the player plugin to tell it to display an ad type that requires control over the player canvas (e.g. popup an overlay style ad or push a companion banner to the webpage surrounding the player.

The `TrackingEventListener` interface ensures that the player mechanics around firing timer events can be hooked into the VAST tracking model.

==Step 2: Loading Configuration Data==

The first task that is undertaken when a player plugin initializes is the loading of any openX/ad related configuration data. 

Configuration information for the JW Player plugin is specified in an XML file that is identified in the `flashvars` variable set when JW player loads. For example, the following line tells JW Player to load the configuration from a file called `rtmp01.xml`

{{{
<param name="flashvars" value="height=260&width=400&plugins=../dist/OpenXAdStreamer.swf&config=rtmp01.xml"/>
}}}

`rtmp01.xml` contains the following configuration settings:

{{{
<config>
   <openxadstreamer.title>
        Example 01
   </openxadstreamer.title>
   <openxadstreamer.netconnectionurl>
        rtmp://ne7c0nwbit.rtmphost.com/videoplayer
   </openxadstreamer.netconnectionurl>
   <openxadstreamer.vastserverurl>
    	http://openx.bouncingminds.com/openx/www/delivery/fc.php
   </openxadstreamer.vastserverurl>
   <openxadstreamer.bitrate>
    	any
   </openxadstreamer.bitrate>
   <openxadstreamer.adschedule>
        [
             {"zone":"1", "position":"pre-roll"}
    	]
    </openxadstreamer.adschedule>
    <openxadstreamer.debuglevel>
    	all
    </openxadstreamer.debuglevel>
</config>
}}}

The following code creates an instance of an `OpenXConfig` object reading the configuration from an actionscript `Object`. 

{{{
// Load up the config and configure the debugger
_openXConfig = new OpenXConfig(config);
doLogAndTrace("Configuration loaded as: ", _openXConfig);
}}}

When JW Player initializes the plugin, it reads the configuration data from the XML file specified in the `flashvars` variable into a global `Object` called `config`.

`config` has been declared as follows in the JW Player plugin:

{{{
public var config:Object = {
   netconnectionurl: null,
   vastserverurl: null,
   streamList: null,
   bitrate: 'any',
   adschedule: null,
   debuglevel: 'fatal',
   notice: null,
   disablecontrols: null,
   streamtype: "mp4",
   deliverytype: "streaming",
   playformat: "single",
   playonce: "false",
   title: null,
   companions: null,
   displaycompanions: true
};
}}}

Flowplayer alternatively allows configuration for it's player to be specified directly as a JSON based configuration as part of the javascript based player insertion.

{{{
<script type="text/javascript">
flowplayer("a.example", "../dist/flowplayer-3.1.0.swf", {
    playlist: [
        {
            url: 'main',
            provider: 'openXAdStreamer'
        }
    ],
    
    plugins: {
        openXRegions: {
            url: '../dist/OpenXRegions-0.4.7.swf'    		
        },

        openXAdStreamer: {
            url: '../dist/OpenXAdStreamer-0.4.7.swf',
            netConnectionUrl: 'rtmp://ne7c0nwbit.rtmphost.com/videoplayer',
            vastServerURL: 'http://openx.bouncingminds.com/openx-2.8.2-rc5/www/delivery/fc.php',
            debugLevel: 'fatal, vast_template, tracking_events, http_calls',
            adSchedule: [
                { zone: '1',
                  position: 'pre-roll'
                }
            ]
        }
    }
});
</script>
}}}

To initialise the `OpenXConfig` in a Flowplayer plugin, the following code segment is used:

{{{
override public function onConfig(model:PluginModel):void {
    _model = model;			
    _openXConfig = new PropertyBinder(new OpenXConfig(), null).copyProperties(model.config) as OpenXConfig;
    doLogAndTrace("Configuration loaded as:", _openXConfig, DebugObject.DEBUG_CONFIG);
}
}}}

One difference you'll notice between the way the configuration is specified for JW Player against Flowplayer is that the configuration variables are in different cases. For JW Player, all variables are specified in lowercase (with the plugin name preceding them - e.g. `openxadstreamer.adschedule`) while for Flowplayer, a mixed case variable name is specified (e.g. `adSchedule`). Flowplayer is not case sensitive, while JW Player appears to be case sensitive requiring all configuration variables to be in lowercase.

The `OpenXConfiguration` class understands that either case may be specified and recognizes the variable accordingly.

==Step 3: Tracking Time and Events==

Once the configuration data has been successfully loaded, the next step is to setup the mechanism that will be used by the framework to track time based events as the stream(s) play.

Timed events are used by the VAST framework to determine when mid roll and non-linear ads (e.g. overlays) are to be displayed.

Different players allow time based events to be tracked and processed in different ways:

  * JW Player allows a listener interface to be registered to receive callbacks every 10th of a second
  * Flowplayer allows "cuepoints" to be set on a clip at a precision of 1000th of a second - when the specified point in time occurs the "cuepoint" interface is called so that the event can be processed

===Tracking Time in JW Player===

In JW Player, to forward time based events to the VAST framework to be analysed and actioned (where required), first establish a model listener for the `TIME` event: 

{{{
_view.addModelListener(ModelEvent.TIME, timeHandler);
}}}

This listener above requires a function called `timeHandler` to be declared:

{{{
private function timeHandler(evt:ModelEvent):void {
    if(_streamSequence != null) {
       _streamSequence.processTimeEvent(_activeStreamIndex, new TimeEvent(evt.data.position * 1000, evt.data.duration));
    }
}
}}}

The `timeHandler` above identifies whether or not a VAST stream sequence (`StreamSequence`) has been loaded. If it has, it forwards the time event to the sequence to be processed.

The `StreamSequence` class has an public method called `processTimeEvent`. This method takes two parameters:

  # The index of the stream (`_activeStreamIndex`) against which the time event is to be applied
  # A `TimeEvent` which holds two values - the actual time (in milliseconds) and the duration of the time event

Keeping track of the active stream index as the playlist is processed is critical to ensuring that timed events are appropriately processed. 

In JW Player, time is reported relative to each clip in the playlist - so when a new clip is started, time is reset to 0.

So, when a time event is passed to the VAST framework, the index of the stream against which that event is to be assessed must be provided.

To keep track of the active stream index for a playlist, the following listener is activated:

{{{
_view.addControllerListener(ControllerEvent.ITEM, playlistSelectionHandler);	
}}}

`playlistSelectionHandler` is called whenever a `change item event` occurs on the playlist. The function then explicitly saves the active clip index from the playlist as `_activeStreamIndex`. This value is then passed to `StreamSequence.processTimeEvent()` when a time event occurs in JW Player every 10th of a second.

{{{
private function playlistSelectionHandler(evt:ControllerEvent):void {
    _activeStreamIndex = evt.data.index;
    doLog("Active playlist stream index changed to " + _activeStreamIndex, DebugObject.DEBUG_PLAYLIST);
}
}}}

===Tracking Time in Flowplayer===



==Step 4: Tracking Control Bar Events==