#summary Building a Custom Player Implementation
#sidebar TableOfContents

The VAST actionscript 3 framework can be used to produce custom player implementations.

To deliver OpenX video advertising to a custom player, 7 key steps need to be taken:

  * [WikiSyntax#Step_1:_The_Key_Interfaces]: Make sure that the right interface classes are integrated into your player class(es)

  * [# Step 2]: Read in the ad related configuration so that the framework knows what form of video advertising is to be delivered

  * [# Step 3]: Hook in the player's time tracking mechanism to the framework so that the various ad related events can be fired at the right point in time

  * [# Step 4]: Hook the player APIs that identify when various control bar functions are activated (e.g. mute, fullscreen etc.) into the framework so that these events can be tracked via the framework and the OpenX ad server

  * [# Step 5]: Implement the required display related callback functions (declared in the `VideoAdDisplayController` interface) so that non linear video ads can be displayed (e.g. overlay and companions)

  * [# Step 6]: Make a request to the OpenX ad server (via the framework) to obtain the video ads for a given "ad schedule" - the result is a fully configured `StreamSequence` that splices the show and video ads together into an ordered list of streams to be played

  * [# Step 7]: Load the fully configured "stream sequence" into the player (manually through custom code or via a playlist) and play it

To illustrate how to use the VAST framework, we'll walk through the key implementation points for the JW Player plugin `OpenXAdStreamer`.

You can grab the source code for the JW Player Ad Streamer [http://code.google.com/p/openx-iab-vast/downloads/detail?name=bouncingminds.openX.jwplayer-latest.tar.gz&can=2&q= here].

==Step 1: The Key Interfaces==

The first thing you will notice about the JW Player plugin is that it implements three key interfaces:

{{{
import com.bouncingminds.vast.display.VideoAdDisplayController;
import com.bouncingminds.vast.model.TemplateLoadListener;
import com.bouncingminds.vast.tracking.TrackingEventListener;

public class OpenXAdStreamer 
       extends MovieClip 
       implements PluginInterface, TemplateLoadListener, VideoAdDisplayController, TrackingEventListener {

       ....
}
}}}

The `TemplateLoadListener` interface provides the hooks that allows the VAST framework to call the player plugin when the VAST data has either been successfully loaded or if it's failed to load.

The `VideoAdDisplayController` interface provides a mechanism that allows the VAST framework to make a call back into the player plugin to tell it to display an ad type that requires control over the player canvas (e.g. popup an overlay style ad or push a companion banner to the webpage surrounding the player.

The `TrackingEventListener` interface ensures that the player mechanics around firing timer events can be hooked into the VAST tracking model.

==Step 2: Loading Configuration Data==

The first task that is undertaken when a player plugin initializes is the loading of any openX/ad related configuration data. 

Configuration information for the JW Player plugin is specified in an XML file that is identified in the `flashvars` variable set when JW player loads. For example, the following line tells JW Player to load the configuration from a file called `rtmp01.xml`

{{{
<param name="flashvars" value="height=260&width=400&plugins=../dist/OpenXAdStreamer.swf&config=rtmp01.xml"/>
}}}

`rtmp01.xml` contains the following configuration settings:

{{{
<config>
   <openxadstreamer.title>
        Example 01
   </openxadstreamer.title>
   <openxadstreamer.netconnectionurl>
        rtmp://ne7c0nwbit.rtmphost.com/videoplayer
   </openxadstreamer.netconnectionurl>
   <openxadstreamer.vastserverurl>
    	http://openx.bouncingminds.com/openx/www/delivery/fc.php
   </openxadstreamer.vastserverurl>
   <openxadstreamer.bitrate>
    	any
   </openxadstreamer.bitrate>
   <openxadstreamer.adschedule>
        [
             {"zone":"1", "position":"pre-roll"}
    	]
    </openxadstreamer.adschedule>
    <openxadstreamer.debuglevel>
    	all
    </openxadstreamer.debuglevel>
</config>
}}}

The following code creates an instance of an `OpenXConfig` object reading the configuration from an actionscript `Object`. 

{{{
// Load up the config and configure the debugger
_openXConfig = new OpenXConfig(config);
doLogAndTrace("Configuration loaded as: ", _openXConfig);
}}}

When JW Player initializes the plugin, it reads the configuration data from the XML file specified in the `flashvars` variable into a global `Object` called `config`.

`config` has been declared as follows in the JW Player plugin:

{{{
public var config:Object = {
   netconnectionurl: null,
   vastserverurl: null,
   streamList: null,
   bitrate: 'any',
   adschedule: null,
   debuglevel: 'fatal',
   notice: null,
   disablecontrols: null,
   streamtype: "mp4",
   deliverytype: "streaming",
   playformat: "single",
   playonce: "false",
   title: null,
   companions: null,
   displaycompanions: true
};
}}}

Flowplayer alternatively allows configuration for it's player to be specified directly as a JSON based configuration as part of the javascript based player insertion.

{{{
<script type="text/javascript">
flowplayer("a.example", "../dist/flowplayer-3.1.0.swf", {
    playlist: [
        {
            url: 'main',
            provider: 'openXAdStreamer'
        }
    ],
    
    plugins: {
        openXRegions: {
            url: '../dist/OpenXRegions-0.4.7.swf'    		
        },

        openXAdStreamer: {
            url: '../dist/OpenXAdStreamer-0.4.7.swf',
            netConnectionUrl: 'rtmp://ne7c0nwbit.rtmphost.com/videoplayer',
            vastServerURL: 'http://openx.bouncingminds.com/openx-2.8.2-rc5/www/delivery/fc.php',
            debugLevel: 'fatal, vast_template, tracking_events, http_calls',
            adSchedule: [
                { zone: '1',
                  position: 'pre-roll'
                }
            ]
        }
    }
});
</script>
}}}

To initialise the `OpenXConfig` in a Flowplayer plugin, the following code segment is used:

{{{
override public function onConfig(model:PluginModel):void {
    _model = model;			
    _openXConfig = new PropertyBinder(new OpenXConfig(), null).copyProperties(model.config) as OpenXConfig;
    doLogAndTrace("Configuration loaded as:", _openXConfig, DebugObject.DEBUG_CONFIG);
}
}}}

One difference you'll notice between the way the configuration is specified for JW Player against Flowplayer is that the configuration variables are in different cases. For JW Player, all variables are specified in lowercase (with the plugin name preceding them - e.g. `openxadstreamer.adschedule`) while for Flowplayer, a mixed case variable name is specified (e.g. `adSchedule`). Flowplayer is not case sensitive, while JW Player appears to be case sensitive requiring all configuration variables to be in lowercase.

The `OpenXConfiguration` class understands that either case may be specified and recognizes the variable accordingly.